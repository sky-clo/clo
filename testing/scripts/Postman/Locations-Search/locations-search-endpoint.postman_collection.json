{
	"info": {
		"_postman_id": "953b55d9-e712-4a67-9177-319d8ea67620",
		"name": "locations/search endpoint",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET flights info and destination weather given to, from, inbound date and outbound date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a630f239-479a-40cb-84c1-b4bc5af5d7f1",
						"exec": [
							"/* ",
							"----- TESTS -----",
							"",
							"THE BELOW TESTS COVER THE FOLLOWING:",
							"",
							"* That the status code returned is as expected",
							"* That the response time is less than 1.5s",
							"",
							"Flights:",
							"* That the response contains a flights, Places, Quotes, and weather object (if the request is valid)",
							"* That the Quotes object contains at least one quote in it (if the request is valid)",
							"* That the MinPrice in the first quote within the Quotes object is of type number (if the request is valid)",
							"* That the places array contains two places (origin and destination)",
							"* That the destination place in the places array contains a place ID of type number, and the expected city and country names",
							"",
							"Weather:",
							"* That the weather object contains the current temp in C and F, wind speed in kph and mph, and condition",
							"* That the data types of each field within the weather.current object is correct",
							"",
							"*/",
							"",
							"const jsonData = pm.response.json();",
							"",
							"// ----- GENERAL TESTS -----",
							"",
							"pm.test(\"Status code is expected\", function () {",
							"    if (data[\"validInput\"]){",
							"        pm.response.to.have.status(200);",
							"    }",
							"    else {",
							"        pm.response.to.have.status(500); ",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is less than 1.5s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"// ----- FLIGHTS TESTS -----",
							"",
							"pm.test(\"If request is valid, check that response contains a flights, Places, Quotes, and weather object\", function(){",
							"    if(data[\"validInput\"]){",
							"        pm.response.to.have.jsonBody(\"flights\")",
							"            .and.to.have.jsonBody(\"flights.Places\")",
							"            .and.to.have.jsonBody(\"flights.Quotes\")",
							"            .and.to.have.jsonBody(\"weather\");",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.status(500);    ",
							"    }",
							"});",
							"",
							"pm.test(\"If request is valid, check that the Quotes object contains at least one quote in it \", function(){",
							"    if (data[\"validInput\"]){",
							"        pm.expect(Object.keys(pm.response.json()[\"flights\"][\"Quotes\"]).length).greaterThan(0)",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.status(500);         ",
							"    }",
							"});",
							"",
							"pm.test(\"If request is valid, check that the Places array contains two places (origin and destination)\", function(){",
							"    if (data[\"validInput\"]){",
							"        pm.expect(Object.keys(pm.response.json()[\"flights\"][\"Places\"]).length).equals(2)",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.status(500);         ",
							"    }",
							"",
							"});",
							"",
							"pm.test(\"If request is valid, check the MinPrice in the first quote within the Quotes object is of type number\", () => {",
							"    if (data[\"validInput\"]) {",
							"        pm.expect(jsonData.flights.Places[0].PlaceId).to.be.an(\"number\");        ",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.status(500);         ",
							"    }",
							"});",
							"",
							"pm.test(\"If the request is valid, check that the destination place in the places array contains a place ID of type number, and the expected city and country names\", function(){",
							"    if (data[\"validInput\"]){",
							"        pm.expect(jsonData.flights.Places[0].PlaceId).to.be.an(\"number\");",
							"",
							"        pm.response.to.have.jsonBody(\"flights.Places[0].['CityName']\",data[\"expectedName\"])",
							"            .and.to.have.jsonBody(\"flights.Places[0].['CountryName']\",data[\"expectedCountry\"]);",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.jsonBody(\"message\",\"\")",
							"            .and.to.have.jsonBody(\"path\",\"/locations/search\");       ",
							"    }",
							"});",
							"",
							"// ----- WEATHER TESTS -----",
							"",
							"pm.test(\"That the weather object contains the current temp in C and F, wind speed in kph and mph, and condition\", function(){",
							"    if (data[\"validInput\"]){",
							"        pm.response.to.have.jsonBody(\"weather.current.temp_c\")",
							"            .and.to.have.jsonBody(\"weather.current.temp_f\")",
							"            .and.to.have.jsonBody(\"weather.current.wind_mph\")",
							"            .and.to.have.jsonBody(\"weather.current.wind_kph\")",
							"            .and.to.have.jsonBody(\"weather.current.condition\");",
							"    }",
							"});",
							"",
							"pm.test(\"That the data types of each field within the weather.current object is correct\", () => {",
							"    if (data[\"validInput\"]){",
							"        pm.expect(jsonData.weather).to.be.a(\"object\");",
							"        pm.expect(jsonData.weather.current).to.be.a(\"object\");",
							"        pm.expect(jsonData.weather.current.temp_c).to.be.an(\"number\");",
							"        pm.expect(jsonData.weather.current.temp_f).to.be.an(\"number\");",
							"        pm.expect(jsonData.weather.current.wind_mph).to.be.an(\"number\");",
							"        pm.expect(jsonData.weather.current.wind_kph).to.be.an(\"number\");",
							"        pm.expect(jsonData.weather.current.condition).to.be.a(\"object\");  ",
							"    }",
							"    else {",
							"         pm.response.to.have.jsonBody(\"error\",\"Internal Server Error\")",
							"            .and.to.have.jsonBody(\"message\",\"\")",
							"            .and.to.have.jsonBody(\"path\",\"/locations/search\");        ",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://18.134.153.152:8080/locations/search?from={{originlocation}}&to={{destlocation}}&inboundDate={{inboundpartialdate}}&outboundDate={{outboundpartialdate}}",
					"protocol": "http",
					"host": [
						"18",
						"134",
						"153",
						"152"
					],
					"port": "8080",
					"path": [
						"locations",
						"search"
					],
					"query": [
						{
							"key": "from",
							"value": "{{originlocation}}"
						},
						{
							"key": "to",
							"value": "{{destlocation}}"
						},
						{
							"key": "inboundDate",
							"value": "{{inboundpartialdate}}"
						},
						{
							"key": "outboundDate",
							"value": "{{outboundpartialdate}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}